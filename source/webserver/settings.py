"""
Django settings for webserver project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import environ
import os
from pathlib import Path
from database.connector import init_db


env = environ.Env(
    # set casting, default value
    # DEBUG=(bool, False)
)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Source
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-dem!i552^wlq1wkw^js7h(t)kdjy!j!&3gm=ut@j1ibsbpml1d"

# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = ["firmwaredroid.cloudlab.zhaw.ch",
                 "firmwaredroid-backend:5000", "https://firmwaredroid.cloudlab.zhaw.ch"]

# Security Settings
CSRF_TRUSTED_ORIGINS = ["https://firmwaredroid.cloudlab.zhaw.ch"]

CORS_ORIGIN_WHITELIST = ["firmwaredroid.cloudlab.zhaw.ch"]

DEBUG_LOCAL = False
print(env('APP_ENV'))
if env('APP_ENV') == "development":
    DEBUG = True
elif env('APP_ENV') == "debug_local":
    DEBUG = True
    DEBUG_LOCAL = True
elif env('APP_ENV') == "production":
    DEBUG = False
elif env('APP_ENV') == "testing":
    DEBUG = True


# Folder Config
MAIN_FOLDER = env('APP_DATA_FOLDER')
FILE_STORAGE_FOLDER = ""
FIRMWARE_FOLDER_IMPORT = ""
FIRMWARE_FOLDER_IMPORT_FAILED = ""
FIRMWARE_FOLDER_STORE = ""
FIRMWARE_FOLDER_APP_EXTRACT = ""
FIRMWARE_FOLDER_FILE_EXTRACT = ""
FIRMWARE_FOLDER_CACHE = ""
LIBS_FOLDER = ""

# Webserver Config
DOMAIN_NAME = os.environ['DOMAIN_NAME']
SERVER_NAME = DOMAIN_NAME
MAX_CONTENT_LENGTH = 7 * 1024 * 1024 * 1024  # MAX File upload size

# DB Config
DB_REPLICA_SET = os.environ['MONGODB_REPLICA_SET']
DB_HOST = os.environ['MONGODB_HOSTNAME']
DB_HOST_PORT = int(os.environ['MONGODB_PORT'])
DB_NAME = os.environ['MONGODB_DATABASE']
DB_AUTH_SRC = os.environ['MONGODB_AUTH_SRC']
DB_URI = 'mongodb://' + os.environ['MONGODB_USERNAME'] \
         + ':' + os.environ['MONGODB_PASSWORD'] \
         + '@' + os.environ['MONGODB_HOSTNAME'] \
         + ':' + str(DB_HOST_PORT) \
         + '/' + os.environ['MONGODB_DATABASE'] \
         + '?authSource=' + DB_AUTH_SRC
# Settings side-loaded by mongo-engine
MONGODB_DATABASES = {
    "default": {
        "db": DB_NAME,
        "name": DB_NAME,
        "host": DB_HOST,
        "password": os.environ['MONGODB_PASSWORD'],
        "username": os.environ['MONGODB_USERNAME'],
        "tz_aware": True,
        "port": DB_HOST_PORT,
        "authSource": DB_AUTH_SRC,
        "authMechanism": "SCRAM-SHA-256"
    },
}
#print(MONGODB_DATABASES)
db = init_db(MONGODB_DATABASES["default"])

# REST API Config
API_TITLE = os.environ['API_TITLE']
API_VERSION = os.environ['API_VERSION']
API_DESCRIPTION = os.environ['API_DESCRIPTION']
API_PREFIX = os.environ['API_PREFIX']
API_DOC_FOLDER = os.environ['API_DOC_FOLDER']

# Firmware Mass Import Config
MASS_IMPORT_NUMBER_OF_THREADS = os.environ['MASS_IMPORT_NUMBER_OF_THREADS']

# Log configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "level": "DEBUG",
    "formatters": {
        "verbose": {
            "format": "{asctime} {name} {levelname} {module} {process:d} {thread:d} {funcName} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{asctime} {levelname} {funcName} {message}",
            "style": "{",
        },
    },
}

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "graphene_django",
    "setup",
    "django_rq",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware"
]

ROOT_URLCONF = "webserver.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "webserver.wsgi.application"

# SQL-Lite Test Database of DJANGO - Keep it for the moment
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}



# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
FORCE_SCRIPT_NAME = '/'
USE_X_FORWARDED_HOST = True
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

GRAPHENE = {
    "SCHEMA": "api.v2.schema.FirmwareDroidRootSchema.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
        'graphene_django.debug.DjangoDebugMiddleware',
    ],
}

# Authentication
# Password validation https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]
DEFAULT_ADMIN_PW = os.environ['DEFAULT_ADMIN_PW']
DEFAULT_ADMIN_MAIL = os.environ['DEFAULT_ADMIN_MAIL']
DEFAULT_ADMIN_USERNAME = os.environ['DEFAULT_ADMIN_USERNAME']
AUTH_USER_MODEL = "setup.User"

# Redis Config
REDIS_HOST_PORT = os.environ['REDIS_HOST_PORT']
REDIS_PASSWORD = os.environ['REDIS_PASSWORD']
REDIS_HOST = "localhost" if DEBUG_LOCAL else "redis"

# RQ Config
RQ_QUEUES = {
    'high-python': {
        'HOST': REDIS_HOST,
        'PORT': 6379,
        'DB': 0,
        'PASSWORD': REDIS_PASSWORD,
        'DEFAULT_TIMEOUT': 60 * 60,
    },
    'default-python': {
        'HOST': REDIS_HOST,
        'PORT': 6379,
        'DB': 0,
        'PASSWORD': REDIS_PASSWORD,
        'DEFAULT_TIMEOUT': 60 * 60,
    },
    'low-python': {
        'HOST': REDIS_HOST,
        'PORT': 6379,
        'DB': 0,
        'PASSWORD': REDIS_PASSWORD,
        'DEFAULT_TIMEOUT': 60 * 60,
    },
    'default-java': {
        'HOST': REDIS_HOST,
        'PORT': 6379,
        'DB': 0,
        'PASSWORD': REDIS_PASSWORD,
        'DEFAULT_TIMEOUT': 60 * 60,
    },
}
