# -*- coding: utf-8 -*-
# This file is part of FirmwareDroid - https://github.com/FirmwareDroid/FirmwareDroid/blob/main/LICENSE.md
# See the file 'LICENSE' for copying permission.
import logging
from model import TlshHash, AndroidApp
from context.context_creator import push_app_context
from graph.networkx_graph_wrapper import get_graph_from_gexf, graph_to_graphml
from utils.file_utils.file_util import binary_to_temp_file

@push_app_context
def add_malware_labels_to_graph(tlsh_cluster_analysis):
    import networkx as nx
    # TODO Refactor this method - add android app reference to tlsh digest
    temp_file = binary_to_temp_file(tlsh_cluster_analysis.gexf_file.read())
    graph = get_graph_from_gexf(temp_file.name)
    color_map = []
    attribute_color_dict = {}
    for node in graph.nodes():
        attribute_color_dict[node] = {}
        tlsh_id = node.split(":")[1]
        tlsh_hash = TlshHash.objects.get(pk=tlsh_id)
        if tlsh_hash:
            try:
                if tlsh_hash.filename.endswith("apk"):
                    android_app = AndroidApp.objects(filename=tlsh_hash.filename,
                                                     firmware_id_reference=tlsh_hash.firmware_id_reference).first()
                    if android_app:
                        logging.info("Got Android app")
                        vt_report = android_app.virus_total_report_reference.fetch()
                        if vt_report:
                            vt_stats = vt_report.file_info["data"]["attributes"]["last_analysis_stats"]
                            if vt_stats["malicious"] and vt_stats["malicious"] > 0:
                                logging.info("Malicious Android app")
                                color_map.append('red')
                                attribute_color_dict[node]['color'] = '#FF0000'
                            else:
                                logging.info("Normal Android app")
                                color_map.append('black')
                                attribute_color_dict[node]['color'] = "#0000FF"
                        else:
                            color_map.append('black')
                            attribute_color_dict[node]['color'] = "#0000FF"
                    else:
                        attribute_color_dict[node]['color'] = "#0000FF"
                        color_map.append('black')
            except Exception as err:
                logging.error(err)
                attribute_color_dict[node]['color'] = "#0000FF"
                color_map.append('black')

    nx.set_node_attributes(graph, attribute_color_dict)
    nx.draw(graph, node_color=color_map, with_labels=True)
    #gexf_file = graph_to_gexf_file(graph)
    gexf_file = graph_to_graphml(graph)
    tlsh_cluster_analysis.gexf_file.replace(gexf_file)
    tlsh_cluster_analysis.save()
