version: '3.7'
services:
  web:
    build: .
    container_name: flask-web
    working_dir: /var/www
    restart: unless-stopped
    env_file:
      - ./.env
    expose:
      - 5000
    volumes:
      - $PWD:/var/www/
    depends_on:
      - mongo-db-1
      - redis
    networks:
      - backend
      - frontend

  mongo-db-1:
    image: mongo:4.2.8-bionic
    container_name: mongo-db-1
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "127.0.0.1:27017:27017"
    volumes:
      - $PWD/env/mongo/init/:/docker-entrypoint-initdb.d/
    networks:
      - backend
      - elastic
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo-db-1:27017/test --quiet
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongo-db-replica-setup:
    image: mongo:4.2.8-bionic
    env_file:
      - ./.env
    links:
      - mongo-db-1:mongo-db-1
    depends_on:
      - mongo-db-1
    networks:
      - backend
    volumes:
      - $PWD/scripts/database/mongo_replica_set_setup.sh:/scripts/mongo_replica_set_setup.sh
    restart: "no"
    entrypoint: [ "bash", "./scripts/mongo_replica_set_setup.sh" ]

  elasticsearch-mongo-connector:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_mongo_connector
    container_name: elasticsearch-mongo-connector
    #restart: unless-stopped
    command: mongo-connector --admin-username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD -m mongo-db-1:27017 -t http://elasticsearch-worker-1:9200 -d elastic2_doc_manager
    depends_on:
      - mongo-db-1
      - elasticsearch-worker-1
    volumes:
      - $PWD/requirements/requirements_mongo_connector.txt:/var/www/requirements_mongo_connector.txt
    env_file:
      - ./.env
    networks:
      - backend
      - elastic

  elasticsearch-worker-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: elasticsearch-worker-1
    restart: unless-stopped
    volumes:
      - $PWD/env/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - node.name=elasticsearch-worker-1
      - cluster.name=es-docker-cluster
      - network.publish_host=elasticsearch-worker-1:9300
      - discovery.seed_hosts=elasticsearch-worker-2:9300,elasticsearch-worker-3:9300
      - cluster.initial_master_nodes=elasticsearch-worker-1,elasticsearch-worker-2
    ulimits:
      memlock:
        soft: -1
        hard: -1
    depends_on:
      - mongo-db-1
    ports:
      - "127.0.0.1:9200:9200"
    networks:
      - elastic

  elasticsearch-worker-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: elasticsearch-worker-2
    restart: unless-stopped
    environment:
      - node.name=elasticsearch-worker-2
      - cluster.name=es-docker-cluster
      - network.publish_host=elasticsearch-worker-2:9300
      - discovery.seed_hosts=elasticsearch-worker-1:9300,elasticsearch-worker-3:9300
      - cluster.initial_master_nodes=elasticsearch-worker-1,elasticsearch-worker-2
    volumes:
      - $PWD/env/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ulimits:
      memlock:
        soft: -1
        hard: -1
    depends_on:
      - mongo-db-1
    networks:
      - elastic

  elasticsearch-worker-3:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: elasticsearch-worker-3
    restart: unless-stopped
    environment:
      - node.name=elasticsearch-worker-3
      - cluster.name=es-docker-cluster
      - network.publish_host=elasticsearch-worker-3:9300
      - discovery.seed_hosts=elasticsearch-worker-1:9300,elasticsearch-worker-2:9300
      - cluster.initial_master_nodes=elasticsearch-worker-1,elasticsearch-worker-2
    volumes:
      - $PWD/env/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ulimits:
      memlock:
        soft: -1
        hard: -1
    depends_on:
      - mongo-db-1
    networks:
      - elastic

  kibana:
    container_name: kibana
    restart: unless-stopped
    image: docker.elastic.co/kibana/kibana:7.12.1
    ports:
      - "127.0.0.1:5601:5601"
    depends_on:
      - elasticsearch-worker-1
    environment:
      - ELASTICSEARCH_HOSTS="http://elasticsearch-worker-1:9200"
    networks:
      - elastic

  nginx:
    container_name: nginx-frontend
    build:
      context: ./
      dockerfile: Dockerfile_NGINX
    restart: unless-stopped
    depends_on:
      - web
    volumes:
      - $PWD/env/nginx:/etc/nginx/conf.d
      - $PWD/env/certbot/conf:/etc/letsencrypt
      - $PWD/env/certbot/www:/var/www/certbot
      - $PWD/firmware-droid-client/build:/usr/share/nginx/build
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend

  redis:
    image: redis:6-buster
    container_name: redis
    command: redis-server
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - backend

  firmware-worker:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_firmware
    container_name: firmware-worker
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./.env
    command: rqworker --name firmware-worker --url redis://redis:6379/ high
    networks:
      - backend
    # TODO replace access right
    privileged: true

  firmware-worker-high-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_firmware
    container_name: firmware-worker-high-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./.env
    command: rqworker --name firmware-worker-high-1 --url redis://redis:6379/ high
    networks:
      - backend
    # TODO replace access right
    privileged: true

  fuzzyhash-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_fuzzyhash
    container_name: fuzzyhash-worker-1
    restart: unless-stopped
    depends_on:
      - redis
      - firmware-worker
    volumes:
      - $PWD:/var/www/
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./.env
    command: rqworker --name fuzzyhash-worker-1 --url redis://redis:6379/ fuzzyhash
    networks:
      - backend
    # TODO replace access right
    privileged: true

  firmware-worker-default-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_firmware
    container_name: firmware-worker-default-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name firmware-worker-default-1 --url redis://redis:6379/ default
    networks:
      - backend

  androguard-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_androguard
    container_name: androguard-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name androguard-worker-1 --url redis://redis:6379/ androguard
    networks:
      - backend

  androwarn-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_androwarn
    container_name: androwarn-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name androwarn-worker-1 --url redis://redis:6379/ androwarn
    networks:
      - backend

  apkid-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_apkid
    container_name: apkid-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name apkid-worker-1 --url redis://redis:6379/ apkid
    networks:
      - backend

  exodus-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_exodus
    container_name: exodus-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name exodus-worker-1 --url redis://redis:6379/ exodus
    networks:
      - backend

  frida-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_frida
    container_name: frida-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name frida-worker-1 --url redis://redis:6379/ frida
    networks:
      - backend

  qark-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_qark
    container_name: qark-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name qark-worker-1 --url redis://redis:6379/ qark
    networks:
      - backend

  quark_engine-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_quark_engine
    container_name: quark_engine-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name quark_engine-worker-1 --url redis://redis:6379/ quark_engine
    networks:
      - backend

  super-android-analyzer-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_super_android_analyzer
    container_name: super_android_analyzer-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name super_android_analyzer-worker-1 --url redis://redis:6379/ super_android_analyzer
    networks:
      - backend

  virustotal-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_virustotal
    container_name: virustotal-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name virustotal-worker-1 --url redis://redis:6379/ virustotal
    networks:
      - backend

  apkleaks-worker-1:
    build:
      context: .
      dockerfile: ./docker/base/Dockerfile_apkleaks
    container_name: apkleaks-worker-1
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - $PWD:/var/www/
    env_file:
      - ./.env
    command: rqworker --name apkleaks-worker-1 --url redis://redis:6379/ apkleaks
    networks:
      - backend



networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
  elastic:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
